{"version":3,"sources":["components/hoverSquares/HoverSquares.jsx","components/mode/Mode.jsx","components/mode/Modes.jsx","components/table/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["HoverSquares","mode","hoverBoard","map","row","cell","cellIndex","Object","values","className","Math","ceil","keys","Mode","value","field","Modes","handleStart","useState","modes","setModes","selectedMode","setSelectedMode","useEffect","axios","get","then","res","myData","entries","data","key","catch","error","console","log","onChange","e","target","defaultValue","onClick","Table","setHoverBoard","generateBoard","twoDimensionalArray","counter","i","j","temp","push","board","setBoard","rowIndex","onMouseEnter","square","handleMouseEnter","App","setMode","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d91218e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./hoverSquares.css\";\r\n\r\n/* \r\nThis component displays the position of active cells on the hover board.\r\nIt maps cells which has true value and gets their key (index). \r\nBased on the chosen mode it just calculates the position of each active cell  \r\n*/\r\nconst HoverSquares = ({ mode, hoverBoard }) => {\r\n  mode = mode - 1;\r\n  return (\r\n    <div>\r\n      {hoverBoard.map((row) =>\r\n        row.map(\r\n          (cell, cellIndex) =>\r\n            Object.values(cell)[0] && (\r\n              <h3 key={cellIndex} className=\"hoverBoardDisplay\">\r\n                Row {Math.ceil(Object.keys(cell)[0] / mode)} Col{\" \"}\r\n                {Object.keys(cell)[0] % mode === 0\r\n                  ? mode\r\n                  : Object.keys(cell)[0] % mode}\r\n              </h3>\r\n            )\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HoverSquares;\r\n","/* Mode options to choose from from the object mode passed */\r\nconst Mode = ({ mode }) => {\r\n  return (\r\n    <option value={Object.values(mode)[0].field}>{Object.keys(mode)[0]}</option>\r\n  );\r\n};\r\n\r\nexport default Mode;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Mode from \"./Mode\";\r\nimport \"./mode.css\";\r\n\r\nconst Modes = ({ handleStart }) => {\r\n  /* \r\n  Modes stores the options from the server \r\n  SelectedMode stores the option selected by an user\r\n  */\r\n  const [modes, setModes] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(\"\");\r\n\r\n  /* \r\n  Get request from the server with mode options and \r\n  store them in modes state as an array of objects \r\n  */\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://demo1030918.mockable.io/\")\r\n      .then((res) => {\r\n        let myData = Object.entries(res.data).map((key) => ({\r\n          [key[0]]: key[1],\r\n        }));\r\n        setModes(myData);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mode\">\r\n      <select\r\n        value={!selectedMode ? \"Pick Mode\" : selectedMode}\r\n        onChange={(e) => setSelectedMode(e.target.value)}\r\n        className=\"modeSelect\"\r\n      >\r\n        <option defaultValue value=\"0\">\r\n          Pick Mode\r\n        </option>\r\n        {modes.map((mode) => (\r\n          <Mode mode={mode} key={Object.keys(mode)[0]} />\r\n        ))}\r\n      </select>\r\n      {/* Send to the parent the mode selected */}\r\n      <button\r\n        className=\"submitModeButton\"\r\n        onClick={() => handleStart(selectedMode)}\r\n      >\r\n        START\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modes;\r\n","import \"./table.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ mode, setHoverBoard }) => {\r\n  /* \r\n  Create two dimensional array to store the state of each cell.\r\n  Each cell will be represented as an object with\r\n  key serving as an index, and value as a state of hover.\r\n  */\r\n  const generateBoard = (mode) => {\r\n    const twoDimensionalArray = [];\r\n    let counter = 1;\r\n    for (let i = 1; i < mode; i++) {\r\n      var row = [];\r\n      for (let j = 1; j < mode; j++) {\r\n        let temp = {};\r\n        temp[counter] = false;\r\n        row.push(temp);\r\n        counter += 1;\r\n      }\r\n      twoDimensionalArray.push(row);\r\n    }\r\n    return twoDimensionalArray;\r\n  };\r\n\r\n  const [board, setBoard] = useState(generateBoard(mode));\r\n\r\n  /* Update the board when mode changes on the parent component */\r\n  useEffect(() => {\r\n    setBoard(generateBoard(mode));\r\n  }, [mode]);\r\n\r\n  /* Update the hover board when any changes happen to the table */\r\n  useEffect( () => {\r\n    setHoverBoard(board);\r\n  })\r\n\r\n  /* Handle the hover event over the cell and update the state */\r\n  const handleMouseEnter = (cell) => {\r\n    setBoard(\r\n      board.map((row) =>\r\n        row.map((square) =>\r\n          Object.keys(square)[0] === cell\r\n            ? { [Object.keys(square)]: !Object.values(square)[0] }\r\n            : { [Object.keys(square)]: Object.values(square)[0] }\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          {board.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td\r\n                  key={cellIndex}\r\n                  onMouseEnter={() => handleMouseEnter(Object.keys(cell)[0])}\r\n                  className={Object.values(cell)[0] ? \"blue\" : \"white\"}\r\n                >\r\n                  {Object.values(cell)[0]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import \"./App.css\";\nimport HoverSquares from \"./components/hoverSquares/HoverSquares\";\nimport Modes from \"./components/mode/Modes\";\nimport Table from \"./components/table/Table\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"\");\n  const [hoverBoard, setHoverBoard] = useState([]);\n\n  /* Pass to the display board the mode that was chosen in Modes component */\n  const passModeToTable = (selectedMode) => {\n    selectedMode && setMode(parseInt(selectedMode) + 1);\n  };\n\n  return (\n    <div className=\"appWrapper\">\n      <div className=\"container\">\n        <div className=\"leftColumn\">\n          <Modes handleStart={passModeToTable} />\n          {mode && mode !== 0 && (\n            <Table mode={mode} setHoverBoard={setHoverBoard} />\n          )}\n        </div>\n        <HoverSquares mode={mode} hoverBoard={hoverBoard} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}